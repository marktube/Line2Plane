import open3d as o3d
import numpy as np
import colorsys
import matplotlib.pyplot as plt
from sklearn import metrics

def get_colors(num_colors):
    colors=[]
    if num_colors <= 1:
        return [[1,0,0]]
    for i in np.arange(0., 360., 360. / num_colors):
        hue = i/360.
        lightness = (50 + np.random.rand() * 10)/100.
        saturation = (90 + np.random.rand() * 10)/100.
        colors.append(colorsys.hls_to_rgb(hue, lightness, saturation))
    return colors

def save_final_cluster(xyz, primitive, fn):
    count = np.max(primitive) + 1
    color_map = np.array(get_colors(count)) * 256
    with open(fn, 'w') as f:
        pn = xyz.shape[0]
        f.write('ply\n')
        f.write('format ascii 1.0\n')
        f.write('comment generated by chao\n')
        f.write('element vertex %d\n' % pn)
        f.write('property float x\n')
        f.write('property float y\n')
        f.write('property float z\n')
        f.write('property uchar red\n')
        f.write('property uchar green\n')
        f.write('property uchar blue\n')
        f.write('end_header\n')
        for i in range(pn):
            f.write('%f %f %f %d %d %d\n' % (xyz[i][0], xyz[i][1], xyz[i][2],
                                             color_map[primitive[i]][0], color_map[primitive[i]][1],
                                             color_map[primitive[i]][2]))

def save_cluster_index(gt_num, pred_num, ri, nmi, i):
    fn = 'Tree' + str(i) + '_cluster_index.txt'
    with open(fn, 'w') as f:
        f.write('Ground Truth Number: %d\n' % gt_num)
        f.write('Prediction Number: %d\n' % pred_num)
        f.write('Rand Index: %f\n' % ri)
        f.write('Normalized Mutual Index: %f\n' % nmi)

def readObj(fn):
    vx = []
    lidx = []
    #gt = []
    with open(fn, "r") as f:
        for line in f:
            if line.startswith('#'): continue
            values = line.split()
            if not values: continue
            if values[0] == 'v':
                v = [float(x) for x in values[1:4]]
                vx.append(v)
            elif values[0] == 'f':
                idx = [int(x) for x in values[1:4]]
                if idx[1] == idx[2]:
                    lidx.append([idx[0] - 1, idx[1] - 1])
            elif values[0] == 'l':
                idx = [int(x) for x in values[1:]]
                lidx.append([idx[0] - 1, idx[1] - 1])
            #else:
            # add other type for mesh
    return vx,lidx

def drawRes(xyz, lidx, labels, max_label):
    colors = plt.get_cmap("tab20")(labels / (max_label if max_label > 0 else 1))
    colors[labels < 0] = 0
    line_set = o3d.geometry.LineSet()
    line_set.points = o3d.utility.Vector3dVector(xyz)
    line_set.lines = o3d.utility.Vector2iVector(lidx)
    line_set.colors = o3d.utility.Vector3dVector(colors[:, :3])
    o3d.visualization.draw_geometries([line_set])


def show_dbscan_cluster(xyz, lidx):
    pcd = o3d.geometry.PointCloud()
    pcd.points = o3d.utility.Vector3dVector(xyz)
    with o3d.utility.VerbosityContextManager(o3d.utility.VerbosityLevel.Debug) as cm:
        labels = np.array(pcd.cluster_dbscan(eps=0.08, min_points=20, print_progress=True))
    max_label = labels.max()
    print(f"point cloud has {max_label + 1} clusters")
    #for i in range(max_label):
    #    print(f"cluster {i} has {np.sum(labels==i)} members")
    llabels = []
    for i in range(len(lidx)):
        l1 = labels[lidx[i][0]]
        l2 = labels[lidx[i][1]]
        if l1 == l2:
            llabels.append(l1)
        else:
            if l1<0 or l2<0:
                if l1<0:
                    llabels.append(l2)
                else:
                    llabels.append(l1)
            else:
                print(f'l1: {l1} l2: {l2}')
                llabels.append(-1)
    llabels = np.array(llabels)
    drawRes(xyz, lidx, llabels, max_label)
    #save_final_cluster(xyz, labels, 'Tree'+str(i)+'.ply')
    return labels,max_label+1


def run_test(filepath):
    vertices, lidx = readObj(filepath)
    pred_labels, pred_num = show_dbscan_cluster(vertices, lidx)

    '''pred_labels, pred_num = show_dbscan_cluster(xyz, i)
            primitive = f['primitive_id'][i]
            codebook = f['codebook'][i]
            gt_labels, gt_num = getGTLabel(codebook, primitive)
            rand_index = metrics.rand_score(gt_labels, pred_labels)
            nmi = metrics.normalized_mutual_info_score(gt_labels, pred_labels)
            save_cluster_index(gt_num, pred_num, rand_index, nmi, i)'''

if __name__ == '__main__':
    #print(o3d.__version__)
    run_test('/home/hiko/Downloads/data/dispatch/other_ball1_line.obj')
